Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"PaginaOrderTier\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"ConfiguracionScreenPreview (2)\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"PaginaOrderTierPreview\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"SalesAnalysisScreenPreview\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"VentasScreenPreview\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 9e6f10a71e329e53fda06c00e67fd3cec4747fde)
+++ b/.idea/deploymentTargetSelector.xml	(date 1747097829439)
@@ -5,21 +5,6 @@
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
       </SelectionState>
-      <SelectionState runConfigName="PaginaOrderTier">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="ConfiguracionScreenPreview (2)">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="PaginaOrderTierPreview">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="SalesAnalysisScreenPreview">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="VentasScreenPreview">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
     </selectionStates>
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/usoftwork/ordersapp/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.usoftwork.ordersapp\r\n\r\nimport android.graphics.Color\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.text.ClickableText\r\nimport androidx.compose.foundation.text.KeyboardActions\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusDirection\r\nimport androidx.compose.ui.platform.LocalFocusManager\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.AnnotatedString\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.usoftwork.ordersapp.data.classes.CreatePedido\r\nimport com.usoftwork.ordersapp.data.classes.CustomButton\r\nimport com.usoftwork.ordersapp.data.classes.ListadoPedido\r\nimport com.usoftwork.ordersapp.data.functions.SalesAnalysis\r\nimport com.usoftwork.ordersapp.ui.screens.*\r\nimport com.usoftwork.ordersapp.ui.theme.*\r\nimport com.usoftwork.ordersapp.ui.theme.OrdersAppTheme\r\nimport conexiondb.DatabaseConnector\r\nimport java.time.format.TextStyle\r\n\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            OrdersAppTheme {\r\n                val navController = rememberNavController()\r\n                Scaffold(\r\n                    topBar = {\r\n                        TopAppBar(\r\n                            title = { },\r\n                            actions = {\r\n                                DarkModeButton()\r\n                            }\r\n                        )\r\n                    }\r\n                ) { innerPadding ->  // <-- Necesitas capturar el padding\r\n                    NavHost(\r\n                        navController = navController,\r\n                        startDestination = Routes.LOGIN,\r\n                        modifier = Modifier.padding(innerPadding) // <-- Usar el padding para evitar solapamiento\r\n                    ) {\r\n                        composable(Routes.LOGIN) { Login(navController) }\r\n                        composable(Routes.REGISTER) { Register(navController) }\r\n                        composable(Routes.HOME) { MenuBar(navController) }\r\n                        composable(Routes.ARMAR) { CreatePedido() }\r\n                        composable(Routes.LISTAR) { ListadoPedido() }\r\n                        composable(Routes.ANALYSIS) { SalesAnalysis(navController) }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@RequiresApi(Build.VERSION_CODES.O)\r\n@Composable\r\n\r\nfun Login(navController: NavHostController) {\r\n    val focusManager = LocalFocusManager.current\r\n    var correo by remember { mutableStateOf(\"\") }\r\n    var contrasenna by remember { mutableStateOf(\"\") }\r\n    var error by remember { mutableStateOf(\"\") }\r\n\r\n    Column(\r\n        modifier = Modifier.fillMaxSize(),\r\n        verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        Image(\r\n            modifier = Modifier.size(200.dp),\r\n            painter = painterResource(id = R.drawable.logo),\r\n            contentDescription = \"Logo de la aplicación\"\r\n        )\r\n        OutlinedTextField(\r\n            value = correo,\r\n            onValueChange = { correo = it },\r\n            label = { Text(\"Ingrese su correo\") },\r\n            keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Next),\r\n            keyboardActions = KeyboardActions(\r\n                onNext = { focusManager.moveFocus(FocusDirection.Down) }\r\n            )\r\n        )\r\n\r\n        OutlinedTextField(\r\n            value = contrasenna,\r\n            onValueChange = { contrasenna = it },\r\n            label = { Text(\"Ingrese Contraseña\") },\r\n            visualTransformation = PasswordVisualTransformation(),\r\n            keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),\r\n            keyboardActions = KeyboardActions(\r\n                onDone = {\r\n                    focusManager.clearFocus()\r\n                    if (correo.isEmpty() || contrasenna.isEmpty()) {\r\n                        error = \"Por favor, complete todos los campos.\"\r\n                    } else {\r\n                        validarCredencialesAsync(correo, contrasenna) { isValid ->\r\n                            if (isValid) {\r\n                                navController.navigate(Routes.HOME)\r\n                            } else {\r\n                                error = \"Credenciales incorrectas.\"\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n        )\r\n\r\n        CustomButton(\r\n            text = \"Ingresar\",\r\n            contentColor = White,\r\n            modifier = Modifier.width(310.dp),\r\n            center = true,\r\n            onClick = {\r\n                if (correo.isEmpty() || contrasenna.isEmpty()) {\r\n                    error = \"Por favor, complete todos los campos.\"\r\n                } else {\r\n                    validarCredencialesAsync(correo, contrasenna) { isValid ->\r\n                        if (isValid) {\r\n                            navController.navigate(Routes.HOME)\r\n                        } else {\r\n                            error = \"Credenciales incorrectas.\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            containerColor = DarkRed // si quieres mantener ese color\r\n        )\r\n        Text(\r\n            text = \"O\",\r\n            color = grey,\r\n            fontSize  = 10.sp)\r\n        CustomButton(\r\n            text = \"Registrarse\",\r\n            contentColor = White,\r\n            modifier = Modifier.width(310.dp),\r\n            center = true,\r\n            onClick = { navController.navigate(Routes.REGISTER) },\r\n            containerColor = DarkNavyBlue\r\n        )\r\n        Text(\r\n            text = \"¿Olvidó su contraseña?\",\r\n            color = grey,\r\n            fontSize = 16.sp,\r\n            modifier = Modifier.clickable {\r\n\r\n                navController.navigate(Routes.REGISTER)\r\n            },\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun Register(navController: NavHostController) {\r\n    val focusManager = LocalFocusManager.current\r\n    var correo by remember { mutableStateOf(\"\") }\r\n    var contrasenna by remember { mutableStateOf(\"\") }\r\n    var confirmarContrasenna by remember { mutableStateOf(\"\") }\r\n    var error by remember { mutableStateOf(\"\") }\r\n\r\n    Column(\r\n        modifier = Modifier.fillMaxSize(),\r\n        verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        Image(\r\n            modifier = Modifier.size(200.dp),\r\n            painter = painterResource(id = R.drawable.logo),\r\n            contentDescription = \"Logo de la aplicación\"\r\n        )\r\n\r\n\r\n        OutlinedTextField(\r\n            value = correo,\r\n            onValueChange = { correo = it },\r\n            label = { Text(\"Ingrese su Correo\") },\r\n            keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Next),\r\n            keyboardActions = KeyboardActions(\r\n                onNext = { focusManager.moveFocus(FocusDirection.Down) }\r\n            )\r\n        )\r\n\r\n        OutlinedTextField(\r\n            value = contrasenna,\r\n            onValueChange = { contrasenna = it },\r\n            label = { Text(\"Ingrese Contraseña\") },\r\n            visualTransformation = PasswordVisualTransformation(),\r\n            keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Next),\r\n            keyboardActions = KeyboardActions(\r\n                onNext = { focusManager.moveFocus(FocusDirection.Down) }\r\n            )\r\n        )\r\n\r\n        OutlinedTextField(\r\n            value = confirmarContrasenna,\r\n            onValueChange = { confirmarContrasenna = it },\r\n            label = { Text(\"Confirme Contraseña\") },\r\n            visualTransformation = PasswordVisualTransformation(),\r\n            keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),\r\n            keyboardActions = KeyboardActions(\r\n                onDone = {\r\n                    focusManager.clearFocus()\r\n                    if (correo.isEmpty() || contrasenna.isEmpty() || confirmarContrasenna.isEmpty()) {\r\n                        error = \"Por favor, complete todos los campos.\"\r\n                    } else if (contrasenna != confirmarContrasenna) {\r\n                        error = \"Las contraseñas no coinciden.\"\r\n                    } else {\r\n                        navController.navigate(Routes.HOME)\r\n                    }\r\n                }\r\n            )\r\n        )\r\n\r\n        CustomButton(\r\n            text = \"Registrar\",\r\n            contentColor = White,\r\n            modifier = Modifier.width(310.dp),\r\n            onClick = {\r\n                if (correo.isEmpty() || contrasenna.isEmpty() || confirmarContrasenna.isEmpty()) {\r\n                    error = \"Por favor, complete todos los campos.\"\r\n                } else if (contrasenna != confirmarContrasenna) {\r\n                    error = \"Las contraseñas no coinciden.\"\r\n                } else {\r\n                    navController.navigate(Routes.HOME)\r\n                }\r\n            },\r\n            containerColor = DarkRed\r\n        )\r\n        CustomButton(\r\n            text = \"Volver a Iniciar Sesión\",\r\n            contentColor = White,\r\n            modifier = Modifier.width(310.dp),\r\n            onClick = { navController.navigate(Routes.LOGIN) },\r\n            containerColor = DarkNavyBlue\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfun validarCredencialesAsync(\r\n    correo: String,\r\n    contrasenna: String,\r\n    onResult: (Boolean) -> Unit\r\n) {\r\n    Thread {\r\n        val isValid = validarCredenciales(correo, contrasenna)\r\n        Handler(Looper.getMainLooper()).post {\r\n            onResult(isValid)\r\n        }\r\n    }.start()\r\n}\r\n\r\nfun validarCredenciales(correo: String, contrasenna: String): Boolean {\r\n    val database = DatabaseConnector()\r\n    /*\r\n            integrar 2 nuevos campos:\r\n            1) la ip/dns de la base de datos (si es que este puede cambiar al paso del tiempo)\r\n            2) el nombre de la base de datos\r\n         */\r\n    val res = database.setConnection(\"\", \"test\", correo, contrasenna)\r\n    return res\r\n}\r\n\r\n\r\nobject Routes {\r\n    const val LOGIN = \"login\"\r\n    const val REGISTER = \"register\"\r\n    const val HOME = \"home\"\r\n    const val ARMAR = \"armar\"\r\n    const val LISTAR = \"listar\"\r\n    const val ANALYSIS = \"analizar\"\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/usoftwork/ordersapp/MainActivity.kt b/app/src/main/java/com/usoftwork/ordersapp/MainActivity.kt
--- a/app/src/main/java/com/usoftwork/ordersapp/MainActivity.kt	(revision 9e6f10a71e329e53fda06c00e67fd3cec4747fde)
+++ b/app/src/main/java/com/usoftwork/ordersapp/MainActivity.kt	(date 1747097930464)
@@ -19,6 +19,7 @@
 import androidx.compose.foundation.text.ClickableText
 import androidx.compose.foundation.text.KeyboardActions
 import androidx.compose.foundation.text.KeyboardOptions
+import androidx.compose.material3.Button
 import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.OutlinedTextField
 import androidx.compose.material3.Scaffold
@@ -37,6 +38,7 @@
 import androidx.compose.ui.text.AnnotatedString
 import androidx.compose.ui.text.input.ImeAction
 import androidx.compose.ui.text.input.PasswordVisualTransformation
+import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import androidx.navigation.NavHostController
@@ -110,6 +112,8 @@
             painter = painterResource(id = R.drawable.logo),
             contentDescription = "Logo de la aplicación"
         )
+
+
         OutlinedTextField(
             value = correo,
             onValueChange = { correo = it },
@@ -297,7 +301,13 @@
             1) la ip/dns de la base de datos (si es que este puede cambiar al paso del tiempo)
             2) el nombre de la base de datos
          */
-    val res = database.setConnection("", "test", correo, contrasenna)
+    val res = database.setConnection("192.168.16.31", "app_9", correo, contrasenna)
+    if (res) {
+        val ocurrencias = database.receive("producto","nombre","tipo = ? & ?", arrayListOf("platillo"))
+        if (ocurrencias != null) {
+            println(ocurrencias)
+        }
+    }
     return res
 }
 
@@ -310,4 +320,3 @@
     const val LISTAR = "listar"
     const val ANALYSIS = "analizar"
 }
-
Index: app/src/main/java/conexiondb/DatabaseConnector.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package conexiondb\r\n\r\nimport android.os.StrictMode\r\nimport android.util.Log\r\nimport java.sql.Connection\r\nimport java.sql.DriverManager\r\nimport java.sql.PreparedStatement\r\nimport java.sql.ResultSet\r\nimport java.sql.SQLException\r\n\r\nclass DatabaseConnector {\r\n    // Cargamos las variables\r\n    private var url = \"\"\r\n    private var user = \"\"\r\n    private var pass = \"\"\r\n    private var connectionEstablished: Boolean = false\r\n\r\n    init {\r\n        val policy = StrictMode.ThreadPolicy.Builder().permitAll().build()\r\n        StrictMode.setThreadPolicy(policy)\r\n    }\r\n\r\n    // funcion que conecta a la base de datos\r\n    private fun getConnection(): Connection? {\r\n        return try {\r\n            Class.forName(\"com.mysql.jdbc.Driver\")\r\n            val connection = DriverManager.getConnection(url, user, pass)\r\n            Log.d(\"DatabaseConnector\", \"Conexión exitosa a la base de datos\")\r\n            connection\r\n\r\n        } catch (e: ClassNotFoundException) {\r\n            Log.e(\"DatabaseConnector\", \"Error con la clase\", e)\r\n            e.printStackTrace()\r\n            null\r\n\r\n        } catch (e: SQLException) {\r\n            Log.e(\"DatabaseConnector\", \"Error con la conexion\", e)\r\n            e.printStackTrace()\r\n            null\r\n\r\n\r\n        } catch (e: Exception) {\r\n            Log.e(\"DatabaseConnector\", \"Error sin relacion\", e)\r\n            e.printStackTrace()\r\n            null\r\n        }\r\n    }\r\n\r\n    // Funcion que establece los datos para la conexion\r\n    fun setConnection(\r\n        direccion: String,\r\n        empresa: String,\r\n        usuario: String,\r\n        contrasena: String\r\n    ): Boolean {\r\n        url = \"jdbc:mysql://$direccion:3306/$empresa\"\r\n        user = usuario\r\n        pass = contrasena\r\n        connectionEstablished = false\r\n\r\n        if (url.contains(\" \")) {\r\n            url = url.replace(\" \", \"_\")\r\n        }\r\n        if (user.contains(\" \")) {\r\n            user.replace(\" \", \"_\")\r\n        }\r\n\r\n        val coneccion = this.getConnection()\r\n        if (coneccion != null) {\r\n            connectionEstablished = true\r\n            coneccion.close()\r\n        }\r\n        return connectionEstablished\r\n    }\r\n\r\n    // Funcion que inserta ocurrencias a la base de datos\r\n    fun submit(\r\n        tabla: String,\r\n        columnas: String,\r\n        valores:\r\n        ArrayList<String>\r\n    ): Boolean {\r\n        val conection = this.getConnection()\r\n        if (conection != null) {\r\n            var query = \"INSERT INTO $tabla($columnas) VALUES (\"\r\n            repeat(valores.size) {\r\n                query = query.plus(\"?,\")\r\n            }\r\n            query = query.dropLast(1)\r\n            query = query.plus(\")\")\r\n\r\n            return try {\r\n                conection.prepareStatement(query).use { preparedStatement: PreparedStatement ->\r\n                    var aux = 0\r\n                    while (aux < valores.size) {\r\n                        if (valores[aux].contains(\".\") && valores[aux].toFloatOrNull() != null) {\r\n                            preparedStatement.setFloat(aux + 1, valores[aux].toFloat())\r\n\r\n                        } else if (valores[aux].toIntOrNull() != null) {\r\n                            preparedStatement.setInt(aux + 1, valores[aux].toInt())\r\n\r\n                        } else {\r\n                            preparedStatement.setString(aux + 1, valores[aux])\r\n\r\n                        }\r\n                        aux++\r\n                    }\r\n\r\n                    preparedStatement.executeUpdate() > 0\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                false\r\n            } finally {\r\n                conection.close()\r\n                true\r\n            }\r\n        }\r\n        return true\r\n\r\n    }\r\n\r\n\r\n    // Funcion que recibe ocurrencias de la base de datos\r\n    // investigar en una forma de cambiar el where y el having de forma automatica para mayor facilidad en el manejo del codigo\r\n    fun receive(\r\n        tabla: String,\r\n        columnas: String,\r\n        condicion: String? = null,\r\n        valores: ArrayList<String>? = null\r\n    ): ArrayList<Map<String, String>>? {\r\n        var res = arrayListOf<Map<String, String>>()\r\n        val conection = this.getConnection()\r\n        if (conection != null) {\r\n            var query = \"SELECT $columnas FROM $tabla\"\r\n            if (condicion != null && valores != null) {\r\n                query.plus(\"WHERE $condicion\")\r\n            }\r\n            try {\r\n                conection.prepareStatement(query).use { preparedStatement: PreparedStatement ->\r\n                    if (valores != null) {\r\n                        var aux = 0\r\n                        while (aux < valores.size) {\r\n                            if (valores[aux].contains(\".\") && valores[aux].toFloatOrNull() != null) {\r\n                                preparedStatement.setFloat(aux + 1, valores[aux].toFloat())\r\n\r\n                            } else if (valores[aux].toIntOrNull() != null) {\r\n                                preparedStatement.setInt(aux + 1, valores[aux].toInt())\r\n\r\n                            } else {\r\n                                preparedStatement.setString(aux + 1, valores[aux])\r\n\r\n                            }\r\n                            aux++\r\n                        }\r\n                    }\r\n\r\n                    preparedStatement.executeQuery().use { resultSet: ResultSet ->\r\n                        val metaData = resultSet.metaData\r\n                        val columnCount = metaData.columnCount\r\n\r\n                        while (resultSet.next()) {\r\n                            var mapa: MutableMap<String, String> = mutableMapOf()\r\n                            for (i in 1..columnCount) {\r\n                                val tipo = metaData.getColumnTypeName(i)\r\n                                val stri: String? = if (tipo == \"INT\") {\r\n                                    resultSet.getInt(i).toString()\r\n                                } else if (tipo == \"DECIMAL\") {\r\n                                    resultSet.getFloat(i).toString()\r\n                                } else if (tipo == \"VARCHAR\" || tipo == \"CHAR\" || tipo == \"DATETIME\") {\r\n                                    resultSet.getString(i)\r\n                                } else {\r\n                                    null\r\n                                }\r\n                                if (stri != null) {\r\n                                    mapa.put(metaData.getColumnName(i), stri)\r\n                                }\r\n                            }\r\n                            res.add(mapa)\r\n                        }\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                null\r\n            } finally {\r\n                conection.close()\r\n            }\r\n        }\r\n         return if (res.isEmpty()) {\r\n             null\r\n         } else {\r\n             res\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/conexiondb/DatabaseConnector.kt b/app/src/main/java/conexiondb/DatabaseConnector.kt
--- a/app/src/main/java/conexiondb/DatabaseConnector.kt	(revision 9e6f10a71e329e53fda06c00e67fd3cec4747fde)
+++ b/app/src/main/java/conexiondb/DatabaseConnector.kt	(date 1747097597246)
@@ -53,7 +53,7 @@
         usuario: String,
         contrasena: String
     ): Boolean {
-        url = "jdbc:mysql://$direccion:3306/$empresa"
+        url = "jdbc:mysql://$direccion:33060/$empresa"
         user = usuario
         pass = contrasena
         connectionEstablished = false
